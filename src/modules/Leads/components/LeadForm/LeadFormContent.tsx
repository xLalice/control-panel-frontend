import { useState, useEffect, useMemo } from "react";
import {
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  Input,
  Button,
  Popover,
  PopoverTrigger,
  PopoverContent,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  Command,
  CommandItem,
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui";
import React from "react";
import { Company, Lead } from "../../types/leads.types";
import { useCompanies } from "./hooks/useCompanies";
import { ChevronsUpDown, Check } from "lucide-react";
import { cn } from "@/lib/utils";
import { useLeadForm } from "./hooks/useLeadForm";
import { User } from "@/types/sharedTypes";
import { LeadStatus } from "../../constants/constants";
import { useUsersData } from "@/modules/UserManagement/hooks/useUsersData";

interface LeadFormContentProps {
  lead?: Lead;
  onSuccess: () => void | undefined;
  onClose: () => void | undefined;
}

export const LeadFormContent: React.FC<LeadFormContentProps> = ({
  onSuccess,
  onClose,
  lead,
}) => {
  const isEditMode = !!lead;

  const { data: companies = [] } = useCompanies();
  const {data: users = []} = useUsersData();

  const [companyPopoverOpen, setCompanyPopoverOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [isNewCompany, setIsNewCompany] = useState(false);
  const [isLeadNameManuallyEdited, setIsLeadNameManuallyEdited] =
    useState(false);

  const { form, onSubmit, isSubmitting, isSubmitError, submitError } =
    useLeadForm({
      lead,
      onSuccess,
      onClose,
    });

  const selectedCompanyId = form.watch("companyId");
  const contactPerson = form.watch("contactPerson");
  const companyName = form.watch("companyName");

  const selectedCompany = companies.find(
    (c: Company) => c.id === selectedCompanyId
  );

  const filteredCompanies =
    searchQuery.trim() === ""
      ? companies
      : companies.filter((company: Company) =>
          company.name.toLowerCase().includes(searchQuery.toLowerCase())
        );

  useEffect(() => {
    if (!isLeadNameManuallyEdited && !isEditMode) {
      const currentCompanyName = isNewCompany
        ? companyName?.trim()
        : selectedCompany?.name?.trim();

      const currentContactPerson = contactPerson?.trim();

      if (currentCompanyName && currentContactPerson) {
        const generatedName = `${currentCompanyName} - ${currentContactPerson}`;
        form.setValue("name", generatedName);
      } else if (currentCompanyName && !currentContactPerson) {
        form.setValue("name", currentCompanyName);
      } else if (!currentCompanyName && currentContactPerson) {
        form.setValue("name", currentContactPerson);
      }
    }
  }, [
    selectedCompany?.name,
    companyName,
    contactPerson,
    isNewCompany,
    isLeadNameManuallyEdited,
    isEditMode,
    form,
  ]);

  useEffect(() => {
    if (!isEditMode) {
      setIsLeadNameManuallyEdited(false);
    }
  }, [isNewCompany, isEditMode]);

  const displayCompanyName = useMemo(
    () =>
      selectedCompany
        ? selectedCompany.name
        : lead?.company?.name || "Select company",
    [selectedCompany, lead?.company?.name] 
  );

  const handleLeadNameChange = (value: string) => {
    const currentCompanyName = isNewCompany
      ? companyName?.trim()
      : selectedCompany?.name?.trim();

    const currentContactPerson = contactPerson?.trim();

    let expectedAutoGenerated = "";
    if (currentCompanyName && currentContactPerson) {
      expectedAutoGenerated = `${currentCompanyName} - ${currentContactPerson}`;
    } else if (currentCompanyName) {
      expectedAutoGenerated = currentCompanyName;
    } else if (currentContactPerson) {
      expectedAutoGenerated = currentContactPerson;
    }

    if (value !== expectedAutoGenerated && value.length > 0) {
      setIsLeadNameManuallyEdited(true);
    }

    return value;
  };

  return (
    <DialogContent className="sm:max-w-[700px] max-h-[85vh] overflow-y-auto">
      <DialogHeader className="pb-2">
        <DialogTitle>
          {isEditMode ? "Edit Lead" : "Create New Lead"}
        </DialogTitle>
        <DialogDescription className="text-xs">
          {isEditMode
            ? "Update the details for this lead. Required fields marked with *."
            : "Enter details for the new lead. Fill in all required fields."}
        </DialogDescription>
      </DialogHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-3">
          <div className="flex items-center gap-2 mb-2">
            <input
              type="checkbox"
              id="createNewCompany"
              checked={isNewCompany}
              onChange={() => {
                const newIsNewCompany = !isNewCompany;
                setIsNewCompany(newIsNewCompany);
                form.clearErrors(["companyId", "companyName"]);

                if (newIsNewCompany) {
                  form.setValue("companyId", "");
                } else {
                  form.setValue("companyName", "");
                  if (isEditMode && lead?.companyId) {
                    form.setValue("companyId", lead.companyId);
                  } else {
                    form.setValue("companyId", "");
                  }
                }
              }}
            />
            <label htmlFor="createNewCompany" className="text-sm">
              {isEditMode ? "Change Company" : "Create New Company"}
            </label>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            {isNewCompany ? (
              <FormField
                control={form.control}
                name="companyName"
                render={({ field }) => (
                  <FormItem className="col-span-1">
                    <FormLabel className="text-xs">
                      Company Name{isEditMode ? "*" : ""}
                    </FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Enter company name"
                        {...field}
                        className="h-8 text-sm"
                      />
                    </FormControl>
                    <FormMessage className="text-xs" />
                  </FormItem>
                )}
              />
            ) : (
              <FormField
                control={form.control}
                name="companyId"
                render={({ field }) => (
                  <FormItem className="col-span-1">
                    <FormLabel className="text-xs">
                      Company{isEditMode ? "*" : ""}
                    </FormLabel>
                    <Popover
                      open={companyPopoverOpen}
                      onOpenChange={setCompanyPopoverOpen}
                    >
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            role="combobox"
                            aria-expanded={companyPopoverOpen}
                            className="w-full justify-between font-normal h-8 text-sm"
                          >
                            {displayCompanyName}
                            <ChevronsUpDown className="ml-2 h-3 w-3 shrink-0 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-full p-0">
                        <Command>
                          <CommandInput
                            placeholder="Search company..."
                            value={searchQuery}
                            onValueChange={setSearchQuery}
                            className="h-8"
                          />
                          <CommandList className="max-h-40">
                            <CommandEmpty>No company found</CommandEmpty>
                            <CommandGroup>
                              {filteredCompanies.map((company: Company) => (
                                <CommandItem
                                  key={company.id}
                                  value={company.name}
                                  onSelect={() => {
                                    field.onChange(company.id);
                                    setCompanyPopoverOpen(false);
                                    setSearchQuery("");
                                  }}
                                  className="text-sm py-1"
                                >
                                  {company.name}
                                  <Check
                                    className={cn(
                                      "ml-auto h-3 w-3",
                                      field.value === company.id
                                        ? "opacity-100"
                                        : "opacity-0"
                                    )}
                                  />
                                </CommandItem>
                              ))}
                            </CommandGroup>
                          </CommandList>
                        </Command>
                      </PopoverContent>
                    </Popover>
                    <FormMessage className="text-xs" />
                  </FormItem>
                )}
              />
            )}

            <FormField
              control={form.control}
              name="contactPerson"
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">
                    Contact Person{isEditMode ? "*" : ""}
                  </FormLabel>
                  <FormControl>
                    <Input {...field} className="h-8 text-sm" />
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="name"
              rules={{ required: "Lead name is required" }}
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">
                    Lead Name{isEditMode ? "*" : ""}
                    {!isEditMode && (
                      <span className="text-muted-foreground ml-1">
                        (auto-generated)
                      </span>
                    )}
                  </FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Enter lead name"
                      {...field}
                      onChange={(e) => {
                        const value = handleLeadNameChange(e.target.value);
                        field.onChange(value);
                      }}
                      className="h-8 text-sm"
                    />
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="email"
              rules={{
                required: "Email is required",
                pattern: {
                  value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                  message: "Invalid email address",
                },
              }}
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">
                    Email{isEditMode ? "*" : ""}
                  </FormLabel>
                  <FormControl>
                    <Input type="email" {...field} className="h-8 text-sm" />
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">Phone</FormLabel>
                  <FormControl>
                    <Input {...field} className="h-8 text-sm" />
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="status"
              rules={{ required: "Status is required" }}
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">
                    Status{isEditMode ? "*" : ""}
                  </FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger className="h-8 text-sm">
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.values(LeadStatus).map((status) => (
                        <SelectItem
                          key={status}
                          value={status}
                          className="text-sm py-1"
                        >
                          {status}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="estimatedValue"
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">Estimated Value (₱)</FormLabel>
                  <FormControl>
                    <div className="relative">
                      <span className="absolute left-3 top-1/2 -translate-y-1/2 text-sm">
                        ₱
                      </span>
                      <Input
                        type="number"
                        className="pl-8 h-8 text-sm"
                        {...field}
                      />
                    </div>
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="leadScore"
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">Lead Score (0-100)</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      onChange={(e) =>
                        field.onChange(e.target.valueAsNumber || null)
                      }
                      value={
                        field.value === null || field.value === undefined
                          ? ""
                          : field.value
                      }
                      min="0"
                      max="100"
                      placeholder="Enter score"
                      className="h-8 text-sm"
                    />
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="source"
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">Source</FormLabel>
                  <FormControl>
                    <Input {...field} className="h-8 text-sm" />
                  </FormControl>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="assignedToId"
              render={({ field }) => (
                <FormItem className="col-span-1">
                  <FormLabel className="text-xs">Assigned To</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger className="h-8 text-sm">
                        <SelectValue placeholder="Select user" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {users.map((user: User) => (
                        <SelectItem
                          key={user.id}
                          value={user.id}
                          className="text-sm py-1"
                        >
                          {user.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage className="text-xs" />
                </FormItem>
              )}
            />
          </div>

          <FormField
            control={form.control}
            name="notes"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-xs">Notes</FormLabel>
                <FormControl>
                  <textarea
                    className="flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    {...field}
                  />
                </FormControl>
                <FormMessage className="text-xs" />
              </FormItem>
            )}
          />

          <DialogFooter className="mt-4 gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={isSubmitting}
              className="h-8 text-xs"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="h-8 text-xs"
            >
              {isSubmitting
                ? isEditMode
                  ? "Saving..."
                  : "Creating..."
                : isEditMode
                ? "Save Changes"
                : "Create Lead"}
            </Button>
          </DialogFooter>
          {isSubmitError && (
            <p className="text-red-500 text-xs mt-2">
              Error: {submitError?.message || "Something went wrong."}
            </p>
          )}
        </form>
      </Form>
    </DialogContent>
  );
};
